#!/bin/sh
#
# Scans containers via Clair wrapped by arminc/clair-scanner.
# See details at:
#
#	- https://github.com/arminc/clair-scanner
#	- https://github.com/arminc/clair-local-scan
#
# ==== Requirements
#
# Before running the script on GitHub action, include the step below:
#
# steps:
#   - name: Checkout clair-scanner
#     uses: actions/checkout@v2
#     with:
#       repository: arminc/clair-scanner
#       path: clair-scanner
#
# ==== Usage
#
# > sh .github/scripts/clair_vulnerability_scan.sh <image1> <image2> ...
#
# ==== Result
# 
# Any error occured before the scanning stage will yield exit code 42. 
# Otherwise the exit code will be the number of vulnerable images among
# the given ones via arguments.
#
set -e

HOST_IP=$(ifconfig docker0 | grep "inet " | awk '{print $2}')

if [ -z $HOST_IP ]; then
	echo "Couldn't resolve HOST_IP."
	exit 42
fi

cd clair-scanner

echo "Starting arminc/clair-db:latest."

docker run -p 5432:5432 -d --name clair-db arminc/clair-db:latest

sleep 10

for i in `seq 10`
do
	docker logs clair-db 2>&1 | grep "ready to accept connections"
	if [ $? -eq 0 ]; then
		break
	elif [ "$i" -eq 10 ]; then
		echo "Couldn't start clair-db."
		exit 42
	else
		echo -n "Waiting for clair-db..."
		sleep 5
	fi
done

echo "Starting arminc/clair-local-scan:latest."

docker run -p 6060:6060 --link clair-db:postgres -d --name \
	clair-local-scan arminc/clair-local-scan:latest

sleep 10

echo "Building binary: clair-scanner."

make build

if ! ls -l | grep clair-scanner ; then
	echo "Couldn't create binary."
	exit 42
fi

set +e

vuln_cnt=0
for image in "$@"
do
	echo "Scanning $image"
	./clair-scanner --ip=$HOST_IP $image
	vuln_cnt=$((vuln_cnt+$?))
done

exit $vuln_cnt
